{
  "name": "Figma-Plugin-YY-Assistant",
  "type": "folder",
  "children": [
    {
      "name": ".DS_Store",
      "type": "file",
      "content": null
    },
    {
      "name": "main-scan.js",
      "type": "file",
      "content": "const uiLog = (text) => {\n  try {\n    figma.ui.postMessage({ type: \"log\", text });\n  } catch (_) {\n  }\n};\nconst log = (...a) => {\n  console.log(\"[YY-Scan]\", ...a);\n  uiLog(a.map(String).join(\" \"));\n};\nconst ok = (m) => {\n  figma.notify(`\\u2705 ${m}`);\n  uiLog(`\\u2705 ${m}`);\n};\nconst err = (m) => {\n  figma.notify(`\\u26A0\\uFE0F ${m}`);\n  uiLog(`\\u26A0\\uFE0F ${m}`);\n};\nfigma.showUI(`<html><body><div id=\"out\" style=\"font:12px/1.4 ui-monospace,monospace;white-space:pre;max-width:380px\"></div>\n<button id=\"ok\">Scan all selected</button>\n<script>\n  const out = document.getElementById('out');\n  const log = (m) => out.textContent += m + \"\\\\n\";\n  window.onmessage = (e) => { const msg = e.data.pluginMessage; if (msg?.type==='log') log(msg.text); };\n  document.getElementById('ok').onclick = () => parent.postMessage({ pluginMessage: { type: 'scan-confirm' }}, '*');\n<\\/script></body></html>`, { width: 420, height: 240 });\nfunction getSelectedFrameOrThrow(frameData2) {\n  log(\"Scanning selection...\");\n  const scanId = String(Date.now());\n  const sel = figma.currentPage.selection;\n  log(\"Selection count:\", sel.length);\n  if (sel.length === 0) {\n    log(\"No selection \\u2192 scanning variables only\");\n    return { frame: null, scanId, note: \"no-selection\" };\n  }\n  const first = sel.find((n) => n.type === \"FRAME\") || null;\n  if (!first) {\n    log(\"First selected node is not a FRAME \\u2192 variables-only\");\n    return { frame: null, scanId, note: \"non-frame\" };\n  }\n  if (sel.length > 1) {\n    log(`Multiple selected (${sel.length}). Using first frame now: ${first.name}`);\n    figma.ui.onmessage = (msg) => {\n      if ((msg == null ? void 0 : msg.type) === \"scan-confirm\") {\n        log(\"UI confirm received (scan all) \\u2014 TODO: expand to multi-frame scan later.\");\n      }\n    };\n  } else {\n    log(`One frame selected: ${first.name}`);\n  }\n  ok(\"Selection data pushed\");\n  return { frame: first, scanId, note: \"frame-selected\" };\n}\nfunction collectContextAndVariables(input) {\n  log(\"Getting context and variable data...\");\n  const meta = {\n    fileName: figma.root.name,\n    pageName: figma.currentPage.name,\n    scanId: input.scanId,\n    timestamp: (/* @__PURE__ */ new Date()).toISOString()\n  };\n  const hasVarAPI = figma.variables && typeof figma.variables.getLocalVariableCollections === \"function\";\n  const variables = hasVarAPI ? figma.variables.getLocalVariableCollections().map((c) => ({ id: c.id, name: c.name })) : [];\n  let nodes = null;\n  if (input.frame) {\n    const f = input.frame;\n    nodes = {\n      kind: \"frame-snapshot\",\n      id: f.id,\n      name: f.name,\n      absPos: { x: f.x, y: f.y },\n      size: { w: f.width, h: f.height }\n      // TODO: add autolayout / fills / text / variable bindings later\n    };\n  }\n  ok(\"Context and variables collected\");\n  return { meta, variables, nodes };\n}\nfunction buildAndStoreReport(scan) {\n  log(\"Compiling report...\");\n  const text = JSON.stringify(\n    {\n      $schema: \"yy://scan.schema.v0\",\n      // placeholder; harmless\n      meta: scan.meta,\n      variables: {\n        collectionsCount: Array.isArray(scan.variables) ? scan.variables.length : 0,\n        collections: scan.variables\n      },\n      nodes: scan.nodes\n    },\n    null,\n    2\n  );\n  const name = \"yy_scan\";\n  let page = figma.root.children.find((p) => p.name === name);\n  if (!page) {\n    page = figma.createPage();\n    page.name = name;\n  }\n  figma.currentPage = page;\n  page.children.forEach((n) => n.remove());\n  const t = figma.createText();\n  page.appendChild(t);\n  return figma.loadFontAsync({ family: \"Inter\", style: \"Regular\" }).catch(() => {\n  }).then(() => {\n    t.characters = text;\n    t.x = 40;\n    t.y = 40;\n    ok(\"Report written to page \\u201Cyy_scan\\u201D\");\n  });\n}\nlog(\"Plugin started\");\nfigma.notify(\"Plugin started\");\nconst frameData = getSelectedFrameOrThrow();\nconst scanData = collectContextAndVariables(frameData);\nbuildAndStoreReport(scanData).catch((e) => err(String((e == null ? void 0 : e.message) || e)));\nok(\"Scan complete\");\n"
    },
    {
      "name": "main-scan.ts",
      "type": "file",
      "content": "/// <reference types=\"@figma/plugin-typings\" />\n\nconst uiLog = (text: string) => { try { figma.ui.postMessage({ type: \"log\", text }); } catch (_) {} };\nconst log= (...a: any[]) => { console.log(\"[YY-Scan]\", ...a); uiLog(a.map(String).join(\" \")); };\nconst ok= (m: string)   => { figma.notify(`✅ ${m}`); uiLog(`✅ ${m}`); };\nconst err= (m: string)   => { figma.notify(`⚠️ ${m}`); uiLog(`⚠️ ${m}`); };\n\nfigma.showUI(`<html><body><div id=\"out\" style=\"font:12px/1.4 ui-monospace,monospace;white-space:pre;max-width:380px\"></div>\n<button id=\"ok\">Scan all selected</button>\n<script>\n  const out = document.getElementById('out');\n  const log = (m) => out.textContent += m + \"\\\\n\";\n  window.onmessage = (e) => { const msg = e.data.pluginMessage; if (msg?.type==='log') log(msg.text); };\n  document.getElementById('ok').onclick = () => parent.postMessage({ pluginMessage: { type: 'scan-confirm' }}, '*');\n</script></body></html>`, { width: 420, height: 240 });\n\n// ——— 1) selection ———\n    function getSelectedFrameOrThrow(frameData):{ frame: FrameNode | null; scanId: string; note: string } /* returns the frame or throws */ {\n        log(\"Scanning selection...\");\n        const scanId = String(Date.now());\n        const sel = figma.currentPage.selection as readonly SceneNode[];\n        log(\"Selection count:\", sel.length);\n\n        if (sel.length === 0) {\n            log(\"No selection → scanning variables only\");\n            return { frame: null, scanId, note: \"no-selection\" };\n        }\n\n    // pick first FRAME; if none, treat as no-selection\n        const first = (sel.find(n => n.type === \"FRAME\") as FrameNode) || null;\n\n        if (!first) {\n            log(\"First selected node is not a FRAME → variables-only\");\n            return { frame: null, scanId, note: \"non-frame\" };\n        }\n\n        if (sel.length > 1) {\n            log(`Multiple selected (${sel.length}). Using first frame now: ${first.name}`);\n            // NOTE: UI button posts {type:'scan-confirm'}; you can handle scanning *all* inside onmessage if you want later.\n            figma.ui.onmessage = (msg) => {\n                if (msg?.type === \"scan-confirm\") {\n                    log(\"UI confirm received (scan all) — TODO: expand to multi-frame scan later.\");\n                }\n            };\n        } else {\n            log(`One frame selected: ${first.name}`);\n        }\n\n        ok(\"Selection data pushed\")\n        return { frame: first, scanId, note: \"frame-selected\" };\n    }\n\n// ——— 2) context + variables ———\n    function collectContextAndVariables(input: { frame: FrameNode | null; scanId: string }) /* collects variables and scans page */ {\n        log(\"Getting context and variable data...\");\n\n        const meta = {\n            fileName: figma.root.name,\n            pageName: figma.currentPage.name,\n            scanId: input.scanId,\n            timestamp: new Date().toISOString(),\n        };\n\n    // minimal variables info so 'variables' exists\n        const hasVarAPI =\n            (figma as any).variables &&\n            typeof (figma as any).variables.getLocalVariableCollections === \"function\";\n\n        const variables = hasVarAPI\n            ? (figma as any).variables.getLocalVariableCollections().map((c: any) => ({ id: c.id, name: c.name }))\n            : [];\n\n        let nodes: any = null;\n        if (input.frame) {\n            const f = input.frame;\n            nodes = {\n                kind: \"frame-snapshot\",\n                id: f.id,\n                name: f.name,\n                absPos: { x: f.x, y: f.y },\n                size: { w: f.width, h: f.height },\n                // TODO: add autolayout / fills / text / variable bindings later\n            };\n        }\n\n        ok(\"Context and variables collected\");\n        return { meta, variables, nodes };\n    }\n\n// ——— 3) report ———\n    function buildAndStoreReport(scan: { meta: any; variables: any; nodes: any }) /* builds up and saves report (maybe add fuctionality for sendtoAI=true) */ {\n            log(\"Compiling report...\")\n\n    // • Add $schema and meta block near the top\n        const text = JSON.stringify(\n            {\n                $schema: \"yy://scan.schema.v0\", // placeholder; harmless\n                meta: scan.meta,\n                variables: {\n                    collectionsCount: Array.isArray(scan.variables) ? scan.variables.length : 0,\n                    collections: scan.variables,\n                },\n                nodes: scan.nodes,\n            },\n            null,\n            2\n        );\n\n        const name = \"yy_scan\";\n        let page = figma.root.children.find(p => p.name === name) as PageNode | undefined;\n        if (!page) { page = figma.createPage(); page.name = name; }\n        figma.currentPage = page;\n\n// • clear previous content (optional)\n        page.children.forEach(n => n.remove());\n\n        const t = figma.createText();\n        page.appendChild(t);\n\n        return figma.loadFontAsync({ family: \"Inter\", style: \"Regular\" })\n            .catch(() => {})\n            .then(() => {\n                t.characters = text;\n                t.x = 40; t.y = 40;\n                ok(\"Report written to page “yy_scan”\");\n            });\n}\n\n\n\n\nlog(\"Plugin started\");\nfigma.notify(\"Plugin started\");\n\nconst frameData = getSelectedFrameOrThrow();\nconst scanData  = collectContextAndVariables(frameData);\nbuildAndStoreReport(scanData).catch(e => err(String(e?.message || e)));\n\nok(\"Scan complete\");\n\n\n\n\n"
    },
    {
      "name": "manifest.json",
      "type": "file",
      "content": "{\n  \"name\": \"YY Figma Assistant — Scan\",\n  \"id\": \"yyfa-scan\",\n  \"api\": \"1.0.0\",\n  \"editorType\": [\"figma\"],\n  \"main\": \"main-scan.js\"\n}\n"
    },
    {
      "name": "package.json",
      "type": "file",
      "content": "{\n  \"scripts\": {\n    \"dev\": \"esbuild main-scan.ts --outfile=main-scan.js --format=cjs --platform=browser --target=es2018\"\n  }\n}"
    }
  ]
}